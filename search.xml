<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[GitHub Pages + Hexo 搭建免费博客]]></title>
    <url>%2F2018%2F11%2F01%2FGitHub-Pages-Hexo-%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[在决定写博客之后，我们首要面临的问题就是如何完成个人博客的初始化工作。此处，个人选择了 GitHub Pages + Hexo 的博客搭建方案。对博客方案选择过程有兴趣的或者有自身明确需求的读客可以阅读 博客的需求 和 博客搭建的选择 两部分以决定是否阅读本博客的方案，若决定使用与本博客同样的解决方案，可以直接阅读本博客的方案。 博客的需求对个人博客而言，我将需要具备的能力按重要性排列如下： 方便快捷编辑修改的能力 数据的存放 内容获取的便利性 其他方面 方便快捷编辑修改的能力我将方便快捷编辑修改的能力房子个人博客需求的首位。 因为与其他网站不同，个人博客在追求形式美的同时，平时更多关注于内容的撰写与发表。具有较为理想的快速编辑与修改能力就显的很有必要，也减少了编写博客的阻力（编写能力弱无形中增加了写博客的惰性）。 其次，博客的内容在于他人的沟通交流或者自身理解程度的加深，需要回去修改或增加内容，所以快速定位博客及编辑修改的能力也要突出。 最后，编写功能操作越简单越好，推送发布的操作越少越好。降低每次写新博客或者编辑旧博客的复杂程度。 数据的存放对个人博客而言，数据存放是一件严肃认真的事情。数据的存放会包含很多方面，比如数据存放的位置，存放的平台，存放的格式等等；存放完还有数据是否自己可以完全掌控，是否容易迁移等等各种各样的问题。 对个人博客而言，一般而言，以文字为主，佐以少量图片或语音调色（可使用外链），因此一般数据量不大。访问的频率也不会太高。但写博客是一件长期的事情，所以要考虑数据存储的稳定性，数据备份迁移等行为不宜频率太高。 此处，我个人倾向于选择数据可以完全自己掌握的存储方式，如博客园，CSDN等博客网站，或如知乎，公众号等平台，首先会对你发表的内容进行审核，因此发表修改编辑有环节，不能所写所见；其次，数据导出或迁移甚至在无网络情况下，本地无法浏览更改；最后，这些数据的所有权归属于平台，因此在博客选择时我排查了上述类型的博客撰写方式。 内容获取的便利性个人博客的撰写目的当然是为了方便他人的阅读与交流，因此要方便他人的阅读，方便交流。当然，也可以通过获取方式对阅读人群进行初步筛选，如常见的新浪微博偏娱乐碎片化的信息记录交流；公众号稍微长一点，也是碎片化的信息；各种课程网站就比较长且完整。 其他方面除上述之外，可能还有很多原因或考虑促成你选择适合自己的博客。比如美观时尚要求，比如内容要求，经常分享自己的拍照视频等等各种各样的需求。按需选择适合自己的博客是促使可以长期坚持下去的首要条件，若是不合适的博客，在几次尝试撰写博客，或者在各大流行的博客间转换几次之后失去了兴趣，也就失去了写博客的初衷。因此，愿每个勇于尝试博客搭建的人都能很快选出适合的博客并坚持下去。 博客搭建的选择该部分大部分内容会参考自ONEGEE 博客 - 怎么选择和快速搭建个人博客 ，本人尝试过的方式会进行额外说明与补充。 该博主将博客按发布形式分为了三种：个人主页注册、静态网站生成与内容管理系统。 个人主页注册个人主页注册是指在现有的博客网站、论坛或社区上注册个人主页。优点是没有技术门槛，注册即用；拥有成熟的平台支撑，方便推广。缺点是风格单一，自定义程度低，还有许多形式与内容的限制。适合嫌麻烦不喜折腾而又不反感条条框框，对数据存储无感且不轻易迁移数据的人。 SegmentFault中文领域最大的编程问答交流社区平台，其所属杭州堆栈科技有限公司创立于2012年，目标是覆盖和服务中国软件开发者和 IT 信息从业者，充分利用在各个平台所能获得的各种技术创新机会为其开发产品应用和服务。 可以理解为中文的 StackOverFlow 社区，技术交流平台成熟。网站提供了文章专栏板块，有审核机制，支持 Markdown 文法、标签、评论、智能目录等。颜值中等的简洁风格。 因此，整体上 SegmentFault 平台计算机相关专业为主要阅读者。 简书简书自身定位为国内最优质的创作社区，2013年4月上线公测版本，正式开放注册。任何人可以在其上进行创作，相互交流。内容偏重于文字。同支持 Markdown 文法、标签、评论功能。颜值中等干净。 简书创始人简书个人主页，知乎ID简叔。对简书或其CEO个人有兴趣的可以去关注。 知乎中文互联网知名知识社交平台，创立于2011年1月26日，产品形态模仿自美国类似网站 Quora。用户通过问答等交流方式建立连接，偏娱乐化和专业知识，目前该公司包括知乎、知乎群组、知乎日报与公益壹点通四款应用。 提供的文章版本可以用作于博客撰写，提供 Markdown 文法、标签、评论功能。颜值中等偏大气的风格。 对知乎用户获取较为方便，但非知乎用户获取困难。大部分互联网人士了解该平台。 CSDNCSDN 全称是 Chinese Software Developer Network，创建于1999年，自身定位是中国专业 IT 社区，为中国的软件开发者提供知识传播、在线学习、职业发展等全生命周期服务。官方数据，截止2018年6月，CSDN 拥有2500+ 万技术会员，论坛发帖数 1000+ 万，技术资源 700+ 万，博客文章1300+ 万，新媒体矩阵粉丝数量 430+ 万。 老牌技术论坛，支持 Markdown 文法、标签、评论功能，文章管理方式传统。但目前 CSDN 的交互体验比较差，常被吐槽。颜值正常偏下水平。 博客园博客园创立于2004年1月，面向开发者的知识分享社区。自身定位为开发者打造纯净的技术交流区，推动并帮助开发者通过互联网分享知识。 老牌技术论坛，申请博客需人工审核，上班时间10分钟左右。支持 Markdown 文法、标签、评论、RSS、相册、文件等功能，文章管理方式传统。Logo 有多种选择，颜值正常，老式网站风格。 其他注册形式的博客还有很多，如网易(很快将迁移至 LOFTER)、新浪、搜狐博客等，甚至还有已经停止维护的博客网站，且大多数定位也不是技术类博客，此处没有介绍。此外，如微信订阅号、公众号，知乎问答、StackOverFlow或Quora、甚至百度贴吧等以问答形式完成博客的撰写也是不错的形式。 静态网站生成通常是指由 Jekyll、Hugo 或 Hexo 等技术生成静态网站，然后上传至 GitHub Pages、Coding Pages 等托管平台免费展示。具有一定的技术门槛，需要了解 Markdown 文法，简单 Linux 命令，域名解析，对要托管的平台如GitHub 或 Coding 有一定了解。 该类型的博客撰写或修改流程大致如下 本地以特定表头格式写博客，放于指定文件夹中 执行命令快速生成完整的静态网站 通过 Git 管理工具将文件上传至代码托管平台 该种博客搭建方式具有搭建快速、自定义程度高、主题丰富、技术更新迭代快、社区活跃的优势，同时具有一定的入坑门槛，适合有一定技术基础或喜欢折腾的用户，不同技术配置间迁移成本低。 Hexo一种基于 Node.js 的快速、简洁、高效的博客框架，GitHub代码库有 24k+ 的 Star（截止2018年11月12日）。安装过程顺利，配置、发布人性化，社区活跃，对技术不熟英文不好的人同样友善。主题多，选择空间大。可以通过插件形式支持博客所需功能。 Hugo一种基于 Go 语言实现的站点生成器，GitHub代码库有30K+的 Star（截止2018年11月12日）。安装过程较为顺利，中文社区不是很活跃。主题多，适合有一定技术基础有更高品味要求的用户。 JekyllGitHub 官方推荐的将纯文本转化为静态网站和博客的站点生成器。GitHub 联合创始人 Tom Preston-Werner 使用 Ruby 语言编写，在 GitHub代码库有35K+的 Star（截止2018年11月12日）。官方的加持，使得可以不依赖本地环境配置，直接在网站生成，本地环境配置较为麻烦。主题较好，相较于 Hexo 与 Hugo 较少。 内容管理系统内容管理系统指带有后台管理的博客系统，需要配置服务器、数据库以及域名管理，在此基础上安装内容管理系统。相较于静态网站生成而言，是动态博客，有前台后台之分，后台负责写作、发布、系统配置等。 这种方式具有贴心的后台管理功能，意味着具有出色的文章管理，相册管理，文件管理，而且在数据库基础上可以实现用户管理以及高清大图上传等，可以内置搜索、评论等常用功能。但同时，丰富的管理功能背后需要用户较高的技术基础，如 Web 相关的服务器知识，数据库知识等。与当下用户体验当道和扁平化时代相比，丰富又臃肿。 因此，对个人用户而言，使用该方式搭建博客，安全稳定，一次上手之后基本无需迁移，但可能需要有服务器的开销花费。若有多人维护，频繁更新的需求可以考虑该方式搭建博客。 WordPress一个开源的基于 PHP 和 MySQL 的个人发布系统。根源和开发可以追溯到2001年，社区活跃，遵循 GPL 协议。 具有较高的市场占有率，博客只是其功能之一，可以搭建企业级网站。中文友好，中文社区活跃。 ghost基于Node.js 实现的开源，旨在为新闻媒体构建开源解决方案。社区活跃，相比于 WordPress 而言，简洁大气，专为写作生产力的极致博客系统，便捷，可以随时随地撰写编辑博客，尤其在不同电脑上。WordPress 良好替换品，有一定搭建门槛。颜值在所有例子中最高（为颜值牺牲了一些功能）。 建议新手村指南：如果是新手，对于以上的技术门槛一窍不通，但是又想要主题精美的个人博客网站，建议从Markdown语言开始学起（半天入门，一天出师）。之后可以选择现有平台，简单上手，也可以稍微了解一些基本的命令行知识和 Git 操作，跟随各种教程，从生成静态网站入门快速搭建博客，完全不花钱。 对与我情况类似的读者，出身计算机相关专业或从事相关工作，可以考虑自己动手搭建。 首推 hexo。性价比最高，中文友好，快速上线，贴心配置，免费高颜值。 其次 WordPress。满足多人维护，资料繁多等需求，虽然门槛高较高，体量较大，且有额外花销，但稳定，可以对网址数据全掌握。 最后，内容高于形式，入坑需谨慎 。 个人博客最终选择了GitHub Pages + Hexo + NexT 的博客解决方案，博客地址：码农驿站 本博客的方案个人搭建技术博客，对颜值要求中等，期望数据完全掌握，由于一个人维护，又不希望维护的成本过高，因此选定了 Hexo 技术方案。其丰富的插件支持足以满足我对个人博客的需求。 在托管平台选取时，天然选择了 GitHub，即程序员交友网站，方便阅读和沟通交流。 GitHub Pages + Hexo + NexT 的方案搭建过程如下，其中可能遇到的问题我会在相应位置提及，但整体而言，较少遇到，搭起来很快。 参考了较多他人的博客与官方文档，资料如下 GitHub + Hexo 搭建个人网站详细教程 - From 知乎 Hexo 官网 环境准备这里的环境准备包括两部分，GitHub 的托管平台配置与本地环境的配置。与博客相关度不大的部分在这里介绍将会较为简略。 GitHub 配置GitHub 是目前最流行的代码仓库，得到了很多大公司与项目的青睐，为使得项目更方便的被人理解，需要项目的介绍页面甚至完整的技术文档，于是 GitHub Pages 服务应运而生，其不仅可以方便的为项目建立介绍站点，也可以用来建立个人博客。 GitHub Pages 属于轻量级的博客系统，配置简单；支持 Markdown 文法，编辑简单迅速；无需自己搭建服务器，GitHub 给每个站免费提供了 300MB 的空间（对文字而言足够）；可以绑定自己的域名。 配置流程大致如下： 购买、绑定独立域名 配置和使用 GitHub 注册账号 本地安装 Git Bash 配置 SSH Keys 设置实现免密登陆 测试联通成功并添加账号等相关信息 GitHub Pages 建立博客 - 注个人博客必须使用与 GitHub 用户名一样的名字，格式为 GitHubName.github.io 绑定域名到GitHub Pages 详细 GitHub Pages 配置过程可参考 使用 GitHub Pages 建立独立博客 - beiyunyun的博客，若与我情况类似，重新建立了新的 GitHub 账号以搭建博客，可能需要了解多个 GitHub 账号配置 SSH Key。 Hexo 本地环境配置Hexo 是基于 Node.js 的博客框架，因此需要首先安装 Node.js，Node.js 的安装包下载地址 安装成功后，通过命令行测试结果如下 1234~ $ node -vv8.4.0~ $ npm -v6.1.0 Hexo 安装较为简单，命令如下所示 1~ $ npm install hexo-cli -g 如上操作成功后，本地的环境基本准备完成，后续进行 Hexo 相关配置说明。 Hexo 配置Hexo 官网技术文档详细说明了如何上手，强烈推荐快速浏览一遍，可以对 Hexo 使用有一个大概了解，知道有哪些功能，方便后续功能的添加维护和更新。 此处基本按照 Hexo 搭建的流程进行配置。 建站安装 Hexo 完成后，执行如下命令，Hexo 将在指定的文件夹中新建所需文件 123~ $ hexo init &lt;blog-folder&gt; # 初始化名为 blog 的博客，可自行设置博客名~ $ cd &lt;blog-folder&gt;&lt;blog-folder&gt; $ npm install 新建完成后，指定文件夹下的目录结构如下所示 12345678.├── _config.yml # 网站的配置信息├── package.json # 应用程序信息，默认安装了 EJS，Stylus 和 Markdown Renderer，可自由移除├── scaffolds # 模板文件夹，Hexo 根据该文件建立文件├── source # 存放用户资源的地方，Markdown 和 HTML 文件被解析并放到 public 文件夹，其他被拷贝过去| ├── _drafts| └── _posts└── themes # 主题文件夹 网站的配置在 _config.yml 文件中，在此可以配置大部分的参数，常用及此次修改位置有网站、网址、目录、文章、分类&amp;标签、日期时间格式、分页、扩展（包括主题）等几个部分，配置文件中对应修改如下。 网站123456789# Sitetitle: 码农驿站 # 网站名，会在标签页上显示subtitle: 一枚码农的自述以供交流娱乐 # 副标题，网站名下面description: Just For Fun # 描述，主要用于SEO，告诉搜索引擎一个关于您站点的简单描述keywords: Codeauthor: 陈文嘉language: zh-Hans# 应填写 Asia/Shanghai，填写 CN 会报错 TypeError: Cannot read property 'utcOffset' of nulltimezone: Asia/Shanghai 网址123456# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://chenwenjia1991.github.ioroot: /permalink: :year/:month/:day/:title/permalink_defaults: 目录123456789# Directorysource_dir: source # 资源文件夹public_dir: public # 公共文件夹，用于存放生成的站点文件tag_dir: tags # 标签文件夹archive_dir: archives # 归档文件夹category_dir: categories # 分类文件夹code_dir: downloads/code # Include Code 文件夹i18n_dir: :lang # 国际化文件夹skip_render: # 跳过指定文件的渲染，可使用 glob表达式来匹配路径 Tips: 刚接触 Hexo，此部分一般不做修改。 分类 &amp; 标签博客添加分类和标签页，参考了 Hexo 使用攻略 - 添加分类及标签 From linlif 博客，添加新的页面也是如此，此处以添加 “categories” 页面为例，主要流程为 创建 “categories” 页面并添加 type 属性 1&lt;blog_folder&gt; $ hexo new page categories 成功后提示 1INFO Created: ~/Documents/blog/source/categories/index.md 正该 index.md 文件中，添加字段 type: “categories” 1234567&lt;blog_folder&gt; $ cat source/categories/index.md---title: categoriesdate: 2018-10-25 23:22:17comments: falsetype: "categories"--- 文章中添加 “categories” 属性即可，如下 123456---title: blog_namedate: ****categories:- category_name--- 对于今后的文章，基本都会在撰写时填写分类&amp;标签，可以通过修改 scaffolds/post.md 文件，在 tags: 上添加 categories: 后保存，之后执行 hexo new ** 产生的新文件就有分类选项了。 该文件是产生新博客时的模板，可以通过此文件设置默认的博客页面。 可能产生的问题 问题描述：GitHub Pages 结构混乱，而本地正常 解决方案：tag、category. 在主题的配置中必须选至少一个，即文档中存在的页面需要在配置文件打开，未打开出现上述异常。参考目录部分。 扩展这里主要指主题，此处选择了 NexT 主题 NexT 主题配置NexT 主题现已支持十种语言，有四种外观，五套代码高亮主题，配置简单而丰富，已支持多种常见第三方服务，社区较为活跃，GitHub代码库有13K+的 Star（截止2018年11月13日）。官网的文档足够全面，基本可以满足个人博客的所有需求。 NexT 安装Hexo 安装主题的方式简单粗暴，只需将主题文件拷贝至站点目录 themes 目录下，然后修改配置文件中的 theme 配置即可。 从刚才的 GitHub代码库 位置拉取最新代码，或下载稳定版代码解压缩到站点 themes 目录下，并将解压后的文件夹名改为 next。 NexT 启用与其他 Hexo 主题启用方式一致，在 Hexo 配置文件中，theme 字段值修改为 next。 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 切换主题后验证主题是否正确启用之前，最好使用 hexo clean 命令清除 Hexo 缓存。 验证主题启动 Hexo 本地站点并开启调试模式，命令是 hexo s --debug 。 服务启动过程中，注意观察命令行输出是否有任何异常信息，若碰到问题，这些信息可帮助更好的定位问题。 当命令行输出如下提示时，可以使用浏览器访问http://localhost:4000检查站点是否正常运行。 1INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 当看到的站点外观与下图所示类似时说明已成功安装 NexT 主题。这是默认的 Schema – Muse。 选择 SchemaSchema 是 NexT 提供的一种特性，以提供多种不同的外观，几乎所有配置均可以在不同 Scheme 之间功用。目前支持了四种 Scheme，在希望启用的 scheme 前去掉注释 #即可。 12345678# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes#scheme: Muse # 默认主题，NexT 的最初版，黑白主调，大量留白#scheme: Mist # Muse 的紧凑版本，整洁有序的单栏外观scheme: Pisces # 双栏，小家碧玉似的清新，此处我采用的外观#scheme: Gemini # 与 Pisces 类似 菜单设置 设定菜单内容，对应 menu 字段，设置格式为 item name: link || icon name。其中item name是名称，并不会直接显示在页面上，而是用于匹配图标及翻译。link目标连接。icon name是 FontAwesome Icon 的名字。 通过下述我的配置，即打开了home、tags、categories 与 archives，其他部分待打开进行设置。 1234567891011121314151617# ---------------------------------------------------------------# Menu Settings# ---------------------------------------------------------------# When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).# Usage: `Key: /link/ || icon`# Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.# Value before `||` delimeter is the target link.# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.menu: home: / || home # 主页 # about: /about/ || user # 关于页面 tags: /tags/ || tags # 标签页 categories: /categories/ || th # 分类页 archives: /archives/ || archive # 归档页 # schedule: /schedule/ || calendar # sitemap: /sitemap.xml || sitemap # 站点地图 # commonweal: /404/ || heartbeat # 公益 404 设置菜单的显示文本。上述步骤1中的名称并不会用于界面上的展示。Hexo 在生成时实用该名字查找对应的翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的 languages/{language}.yml（{language}为自己所使用的语言）。 12345678910menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 about: 关于 search: 搜索 schedule: 日程表 sitemap: 站点地图 commonweal: 公益 404 设定菜单项的图标，对应字段是menu_settings。 1234# Enable/Disable menu icons / item badges.menu_settings: icons: true badges: false 注：在菜单图标开启的情况下，如果菜单项与菜单未匹配（没有设置或者无效的 Font Awesome 图标名字） 的情况下，NexT 将会使用 ? 作为图标。 图标配置&amp;头像修改主题配置文件中的favicon 中，内容如下 12345678910111213141516# ---------------------------------------------------------------# Site Information Settings# ---------------------------------------------------------------# To get or check favicons visit: https://realfavicongenerator.net# Put your favicons into `hexo-site/source/` (recommend) or `hexo-site/themes/next/source/images/` directory.# Default NexT favicons placed in `hexo-site/themes/next/source/images/` directory.# And if you want to place your icons in `hexo-site/source/` root directory, you must remove `/images` prefix from pathes.# For example, you put your favicons into `hexo-site/source/images` directory.# Then need to rename &amp; redefine they on any other names, otherwise icons from Next will rewrite your custom icons in Hexo.favicon: small: /images/blog_logos/16x16.png medium: /images/blog_logos/32x32.png apple_touch_icon: /images/blog_logos/apple-icon-180x180.png safari_pinned_tab: /images/blog_logos/logo.svg android_manifest: /images/blog_logos/manifest.json ms_browserconfig: /images/blog_logos/browserconfig.xml 主题配置文件中的avatar 中，内容如下 123456789101112# Sidebar Avataravatar: # in theme directory(source/images): /images/avatar.gif # in site directory(source/uploads): /uploads/avatar.gif # You can also use other linking images. url: /images/blog_logos/avatar.gif # If true, the avatar would be dispalyed in circle. rounded: true # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar. opacity: 1 # If true, the avatar would be rotated with the cursor. rotated: true 其图像建议放入博客的 source/images 中，这样将来修改或更换该图片均不会失效。 网站 Logo、头像等的制作网上有很多工具，此处不做过多说明。 集成评论模块Hexo NexT 主题下，支持较多的评论系统，具体可参看NexT 第三方服务集成。除评论系统外，还可以通过第三方服务增加数据统计与分析功能，内容分享服务，搜索服务，数学公式显示，Facebook SDK 支持，Google 站点管理工具等服务。 官方推荐的评论模块有 DISQUES、Facebook Comments、HyperComments、网易云跟帖、LiveRe几种。参考了知乎问题Hexo(NexT主题)评论系统哪个好？，根据其推荐，选择了 Gitalk 作为此处评论系统。 Gitalk 是一个基于 GitHub Issue 和 Preact 开发的评论插件，使用 GitHub 登陆，支持多语言，支持个人或组织，无干扰模式（设置 distractionFreeMode 为 true 开启），支持快捷键（cmd|ctrl + enter）提交。 此处工作参考了博客Hexo NexT 主题中集成 Gitalk 评论系统 - From asdfv1929‘s Home，配置流程如下 GitHub 中注册新应用，注册链接，填写内容如下 1234Application name # 应用名称Homepage URL # 网址，此处填 https://chenwenjia1991.github.io/Application description # 应用描述~Authorization callback URL # 授权回调网址， https://chenwenjia1991.github.io/ 点击注册后，保存 Client ID 和 Client Secret，在后面的配置中会用到 主题配置文件中配置 Gitalk，具体参数含义可参考详细参数列表 1234567891011# Gitalk# Introduction: https://github.com/gitalk/gitalk/blob/master/readme-cn.md gitalk: enable: true githubID: chenwenjia1991 # GitHub 账号 repo: Gitalk-Comment # 存储评论的仓库，可新建或使用旧项目，只写项目名称即可，项目需开启 issue ClientID: ** # 上述记录的 Client ID ClientSecret: ** # 上述 Client Secret adminUser: chenwenjia1991 #指定可初始化评论账户 perPage: 15 # 每页显示的最大评论数 distractionFreeMode: true # 全屏遮罩 通过 MD5 加密 ID 以解决 Label 长度不能超过50的问题，出现的具体问题描述及解决方案参考 Gitalk Issues 115，将JS脚本文件拷贝至 source/js/src/md5.min.js。 主题中进行相关配置 主题目录下/layout/_third-party/comments文件夹中 创建 gitalk.swig 文件并添加以下内容 12345678910111213141516171819&#123;% if page.comments &amp;&amp; theme.gitalk.enable %&#125; &lt;link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"&gt; &lt;script src="https://unpkg.com/gitalk/dist/gitalk.min.js"&gt;&lt;/script&gt; &lt;script src="/js/src/md5.min.js"&gt;&lt;/script&gt; # &lt;— 添加的上述脚本的路径 &lt;script type="text/javascript"&gt; var gitalk = new Gitalk(&#123; clientID: '&#123;&#123; theme.gitalk.ClientID &#125;&#125;', clientSecret: '&#123;&#123; theme.gitalk.ClientSecret &#125;&#125;', repo: '&#123;&#123; theme.gitalk.repo &#125;&#125;', owner: '&#123;&#123; theme.gitalk.githubID &#125;&#125;', admin: ['&#123;&#123; theme.gitalk.adminUser &#125;&#125;'], id: md5(location.pathname), # &lt;— 使用上述脚本中的函数加密 distractionFreeMode: '&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;' &#125;) gitalk.render('gitalk-container') &lt;/script&gt;&#123;% endif %&#125; 修改index.swig，在其末尾添加 include 'gitalk.swig' %&#125;```将上述文件注册123456* 修改主题目录中 `/layout/_partials/comments.swig`文件，在`&#123;% endif %&#125;`前添加如下内容```shell&#123;% elseif theme.gitalk.enable %&#125; &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt; 主题目录下/source/css/_common/components/third-party文件夹中 新建 gitalk.styl，内容如下 1234.gt-header a, .gt-comments a, .gt-popup aborder-bottom: none;.gt-container .gt-popup .gt-action.is--active:beforetop: 0.7em; 修改third-party.styl文件，末尾添加@import &quot;gitalk&quot; if hexo-config(&#39;gitalk.enable&#39;); 重新生成静态网页并推送至GitHub Pages hexo clearn &amp;&amp; hexo g &amp;&amp; hexo d 站点统计使用了不蒜子统计，配置简单，在主题配置文件中设置busuanzi_count的enable的值为true即可。 数学公式支持主题配置文件中，设置mathjax的值为true即可。借助于 MathJax 显示数学公式。 图床在图片较多时，将图片上传至 GitHub Pages 已不再合适，毕竟有300MB的大小限制，此时考虑图床。此处参考国内外部分可用图床推荐对比-YiCH_ 简书，嗯，图片就交给它了-少数派图床推荐等相关资料，选取了腾讯云 COS 做图床，存储空间 50GB，外网下行 10GB，基本够用 - 有防盗链设置。基本满足了我们的需求。 站内搜索服务官网提供了 Swiftype、微搜索、Local Search、Algolia几种，其中 Swiftype 与 Algoliia 开始收费项目，故舍去。 此处选择了 Local Search，两种实现方式，一是本地建立索引；二是采用第三方线上服务。同样修改完重新生成网站并推送。 12345678910111213# 1. 安装 hexo-generator-searchdb，站点根目录下执行如下命令blog_path $ npm install hexo-generator-searchdb --save# 2. 编辑站点配置文件，新增如下内容# Local Searchsearch: path: search.xml field: post format: html limit: 10000# 3. 主题配置文件中，启动本地搜索，且可以修改相关配置# Local searchlocal_search: enable: true Markdown 本地编辑器On The Way! 后记On The Way!]]></content>
      <categories>
        <category>DevelopTools</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为什么开始写博客]]></title>
    <url>%2F2018%2F10%2F25%2F%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[在2018年的第四个季度，在花费了将近一周的时间之后，最终搭起了自己的个人博客。 这是自己搭起来的第三个博客，前两个完成搭建工作之后逐渐无疾而终，在这次花费最多的时间与精力下，期望本次的博客可以长久不衰~ 为什么要写博客三年前，朋友向我推荐写博客，将自己的最近踩过的坑或者看过学到的知识做一总结分享出来，比如开发架构，比如算法分析，比如机器学习等等。一直觉得所学太浅不值得挂出来，拖拖拉拉许久也未成行。 直至硕士就业将近，完成了自己在 CSDN 的排序算法总结的第一篇博客，至今已有三年有余，500+的访问量。因各种各样的原因，在 CSDN 的只进行了一次就放弃了。第一次尝试，有收获也有失败之处。分享之后曾收到来自朋友的鼓励以及运行代码的朋友给与的反馈和建议，使得自己对于该部分的知识不仅掌握的更加扎实，理解更深入，同时自己的努力也给刚开始学习该部分知识的其他人带去帮助，也是一种喜悦。后来由于自己的原因以及 CSDN 编写博客的不畅，逐渐放弃了这种总结分享的方式。 工作之后，通过 GitHub Pages + Hexo + NexT 方式尝试搭建了个人博客。随工作进行，以及工作学习习惯的原因，更多笔记总结多放于印象笔记中，第二个博客渐渐也冷落许久。 最近随着团队技术积累的建设，团队完成了团队博客的搭建与初步撰写工作。工作以来，积累的很多东西都置于印象笔记中，需要更多的总结回顾与沉淀。因此用一周的时间完成了本博客的搭建及初始化工作。 此致，希望博客可以长久不衰！ 如何写博客什么是博客？个人将其当做记录自身学习成长过程的分享平台。其目的有三：一是回顾总结自身所学所理解认知；二是能给与我情况相似的人以启发，扬长避短；三是时时刻刻可以督促鞭策自己，砥砺前行。 基于此，本人博客基本围绕三点展开：遇到什么问题、如何去解决这个问题的、最终确定的解决方案。 定义问题在学习工作中，很多时候明确问题是很难的一件事情。也许，终其一生，很多事情我们应对之时总觉得哪里不舒服，却找不到问题的根源；也许，有时候发现自认为的问题原因却不是事情的根源所在，解决了问题不能使得事情完美；也许，更多事情，甚至不知道如何去抽象描述问题。 因此，定义问题是我们努力的探索的开始，也是如下工作的基石，问题定义的越明确清晰，解的范围越小越容易获得。 如何解决不同的问题，不同的思考角度，不同的利弊权衡，我们总会选出不同的解决方案。该部分我会尽量介绍自己是如何完成了一个问题解的寻求过程，以及遇到的解有哪些利弊，从哪些角度解决问题的。 解决方案这部分主要完成解的选择理由，以及解决问题的实践过程。当然，有时候这个问题无解也是一种解决方案。人相对于宇宙，未知总是生活的常态。 写博客的好处写博客有很多好处。开始写博客时，可能想到了如下这些，也许在博客的进行过程中，会陆陆续续添加一些新的益处与人分享。 更多的思考首先，写作就是一个深度思考的过程。很多在脑海中的事情，或者已经语言表达过的事情，用文字记录下来会是一个更深刻，更严肃的过程。相比较口语，文字在大多数情况下总有更强的逻辑性与说服力。因此，写博客的过程也是自己对所写内容进行思考回顾的过程。其次，事情完成之后记录下来，站在事情之外去看待问题的定义、解决过程会有更多收获，哪里做的好或者做的不好一目了然。更重要的是分享出来给更多人看到，他人会从更多的角度出发去接受理解这个问题，他们的思考与反馈会给自己更多考虑与帮助。 逼着自己去学习人很多时候都是有惰性的，学习的过程也不总会是顺风顺水开开心心的。因此很多时候人需要逼自己一把，越过高山。博客的撰写除了自己的记录总结，也是接受阅读的朋友们监督推动自己不断前进的过程。 学会坚持坚持做一件事情总是随着坚持时间的加长而愈加困难。学习博客恰是这样一个需要长久坚持的事情，期待自己在这方面可以做的更好更完美。 博客是一份好的简历毋庸置疑，博客相较于简历，更多体现你的知识体系，技能掌握情况等等。与简历相比，内容更丰富。当然，博客可以添加于自己的简历之上，给别人或者工作岗位确认你是否是需要的那个人~获得更匹配的岗位。 知名度提升技术道路上认识更多志同道合的人，除了在碰到一个问题时，多了可以询问咨询解决方案的通道，多了共同探索学习的朋友，你自己也会在技术圈的知名度逐步提升。 是否需要一个个人博客每个人都可以搞一个博客，无论这个博客会对公对私。记录自己的生活学习成长，吸取经验和教训，总是为了让明天的自己成为更好的自己。 后记在开源思潮日益兴盛的今天，博客搭建的难度越来越低，我们可以更关注于我们想做的事情而不是工具的选择。后续，回把自己博客的搭建过程放出来供搭建选择参考。当然也大不必将精力放在博客上太多，更多的我们要关注博客的内容，见证自己的成长。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
</search>
